"""
app.py - Sailpeak Meeting Transcription
Simple Flask app for Railway deployment
"""

from flask import Flask, request, render_template, jsonify
import whisper
import os
import tempfile
import re
from datetime import datetime
import threading
import io
import base64
import json
from email.mime.text import MIMEText
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

app = Flask(__name__)

# Load Google Service Account credentials from environment
SERVICE_ACCOUNT_INFO = json.loads(os.environ.get('GOOGLE_SERVICE_ACCOUNT_JSON', '{}'))

# Initialize services
def get_google_services():
    credentials = Credentials.from_service_account_info(
        SERVICE_ACCOUNT_INFO,
        scopes=[
            'https://www.googleapis.com/auth/drive',
            'https://www.googleapis.com/auth/gmail.send'
        ]
    )
    drive_service = build('drive', 'v3', credentials=credentials)
    gmail_service = build('gmail', 'v1', credentials=credentials)
    return drive_service, gmail_service

# Load Whisper model
print("Loading Whisper model...")
model = whisper.load_model("base")
print("Whisper model loaded!")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/transcribe', methods=['POST'])
def transcribe():
    try:
        data = request.json
        drive_url = data.get('drive_url')
        email = data.get('email')
        
        if not drive_url or not email:
            return jsonify({'error': 'Please provide both drive URL and email'}), 400
        
        # Start background transcription
        thread = threading.Thread(target=process_transcription, args=(drive_url, email))
        thread.daemon = True
        thread.start()
        
        return jsonify({'message': 'Transcription started! You will receive an email when complete.'})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

def process_transcription(drive_url, email):
    try:
        # Extract file ID from Drive URL
        file_id = extract_file_id(drive_url)
        if not file_id:
            raise Exception('Invalid Google Drive URL')
        
        # Get Google services
        drive_service, gmail_service = get_google_services()
        
        # Download file from Drive
        print(f"Downloading file: {file_id}")
        file_metadata = drive_service.files().get(fileId=file_id).execute()
        file_name = file_metadata['name']
        
        request = drive_service.files().get_media(fileId=file_id)
        file_io = io.BytesIO()
        downloader = MediaIoBaseDownload(file_io, request)
        
        done = False
        while done is False:
            status, done = downloader.next_chunk()
            print(f"Download progress: {int(status.progress() * 100)}%")
        
        # Save to temporary file
        with tempfile.NamedTemporaryFile(delete=False, suffix='.tmp') as tmp_file:
            tmp_file.write(file_io.getvalue())
            temp_path = tmp_file.name
        
        # Transcribe with Whisper
        print("Starting transcription...")
        result = model.transcribe(temp_path)
        
        # Format transcription
        transcript = format_transcription(result, file_name)
        
        # Send email
        send_email(gmail_service, email, file_name, transcript)
        
        # Cleanup
        os.unlink(temp_path)
        
        print(f"Transcription completed and sent to {email}")
        
    except Exception as e:
        print(f"Error in transcription: {e}")
        # Send error email
        try:
            drive_service, gmail_service = get_google_services()
            error_msg = f"Error processing transcription: {str(e)}"
            send_email(gmail_service, email, "Error", error_msg)
        except:
            pass

def extract_file_id(url):
    patterns = [
        r'/file/d/([a-zA-Z0-9-_]+)',
        r'id=([a-zA-Z0-9-_]+)',
        r'/open\?id=([a-zA-Z0-9-_]+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    return None

def format_transcription(result, filename):
    transcript = f"""SAILPEAK MEETING TRANSCRIPTION
{'=' * 60}

File: {filename}
Duration: {result.get('duration', 'Unknown')} seconds
Language: {result.get('language', 'Auto-detected')}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 60}

TRANSCRIPT:

{result['text']}

{'=' * 60}

Generated by Sailpeak
Pioneer • Power • New Luxury
sailpeak.com
"""
    return transcript

def send_email(gmail_service, to_email, filename, transcript):
    subject = f"Sailpeak Meeting Transcription - {filename}"
    
    message = MIMEText(transcript)
    message['to'] = to_email
    message['subject'] = subject
    
    raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode()
    
    gmail_service.users().messages().send(
        userId='me',
        body={'raw': raw_message}
    ).execute()

@app.route('/health')
def health():
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
